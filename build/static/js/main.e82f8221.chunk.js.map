{"version":3,"sources":["components/loginForm/LoginForm.js","App.js","serviceWorker.js","index.js"],"names":["LoginForm","state","loginSucced","userId","loginValue","passValue","_this2","this","react_default","a","createElement","className","TextField_default","id","value","onChange","evt","updateLoginValue","label","type","updatePassValue","autoComplete","Button_default","variant","color","onClick","checkPassword","login","pass","_this3","params","FormData","append","axios","post","then","response","data","console","log","undefined","user_id","setState","target","Component","theme","createMuiTheme","typography","useNextVariants","palette","primary","lightGreen","App","styles","components_loginForm_LoginForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8QAyFeA,6MAlFbC,MAAQ,CACNC,aAAa,EACbC,OAAQ,EACRC,WAAY,GACZC,UAAW,4EAGJ,IAAAC,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACEE,UAAU,aACVE,GAAG,aACHC,MAAOP,KAAKN,MAAMG,WAClBW,SAAU,SAACC,GAAD,OAASV,EAAKW,iBAAiBD,IACzCE,MAAM,UAERV,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACEE,UAAU,aACVE,GAAG,0BACHK,MAAM,WACNC,KAAK,WACLL,MAAOP,KAAKN,MAAMI,UAClBU,SAAU,SAACC,GAAD,OAASV,EAAKc,gBAAgBJ,IACxCK,aAAa,qBAEfb,EAAAC,EAAAC,cAACY,EAAAb,EAAD,CAAQE,UAAU,kBAAkBY,QAAQ,YAAYC,MAAM,UAAUC,QAAS,kBAAMnB,EAAKoB,cAAcpB,EAAKL,MAAMG,WAAWE,EAAKL,MAAMI,aAA3I,gDAMQsB,EAAOC,GAAM,IAAAC,EAAAtB,KAErBuB,EAAS,IAAIC,SACjBD,EAAOE,OAAO,QAASL,GACvBG,EAAOE,OAAO,OAAQJ,GACtBK,IAAMC,KAJM,yBAIIJ,GAAQK,KAAK,SAAAC,GAAQ,OAAIA,EAASC,OACjDF,KAAK,SAACE,GACLC,QAAQC,IAAIZ,GACZW,QAAQC,IAAIX,GACZU,QAAQC,WAAWF,GACnBC,QAAQC,IAAIF,QACmBG,WAArBH,EAAK,GAAGI,QAChBZ,EAAKa,SAAS,CAACvC,OAAQkC,EAAK,GAAGI,QAASvC,aAAa,IAErD2B,EAAKa,SAAS,CAACvC,OAAQ,IAEzBmC,QAAQC,IAAIV,EAAK5B,MAAMC,wDAsBVc,GACfT,KAAKmC,SAAS,CACZtC,WAAYY,EAAI2B,OAAO7B,gDAGXE,GACdT,KAAKmC,SAAS,CACZrC,UAAWW,EAAI2B,OAAO7B,eA9EJ8B,uCCAlBC,EAAQC,yBAAe,CAC3BC,WAAY,CACVC,iBAAiB,GAEnBC,QAAS,CACPC,QAASC,OAeEC,MAVf,WACE,OACE5C,EAAAC,EAAAC,cAAC2C,EAAA,iBAAD,CAAkBR,MAAOA,GACvBrC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC4C,EAAD,SCRYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,KAAK,SAAAiC,GACjCA,EAAaC","file":"static/js/main.e82f8221.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport './LoginForm.scss';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nclass LoginForm extends Component {\r\n  state = {\r\n    loginSucced: false,\r\n    userId: 0,\r\n    loginValue: '',\r\n    passValue: ''\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className='loginForm'>\r\n        <TextField \r\n          className='loginInput'\r\n          id=\"loginField\"\r\n          value={this.state.loginValue}\r\n          onChange={(evt) => this.updateLoginValue(evt)}\r\n          label=\"Login\"\r\n        />\r\n        <TextField\r\n          className='loginInput'\r\n          id=\"standard-password-input\"\r\n          label=\"Password\"\r\n          type=\"password\"\r\n          value={this.state.passValue}\r\n          onChange={(evt) => this.updatePassValue(evt)}\r\n          autoComplete=\"current-password\"\r\n        />\r\n        <Button className='loginInputApply' variant=\"contained\" color=\"primary\" onClick={() => this.checkPassword(this.state.loginValue,this.state.passValue)}>\r\n          Login\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n  checkPassword(login, pass) {\r\n    const url = '/api/checkPassword.php'\r\n    var params = new FormData();\r\n    params.append('login', login);\r\n    params.append('pass', pass);\r\n    axios.post(url, params).then(response => response.data)\r\n    .then((data) => {\r\n      console.log(login);\r\n      console.log(pass);\r\n      console.log(typeof(data));\r\n      console.log(data);\r\n      if(typeof(data[0].user_id) !== undefined){\r\n        this.setState({userId: data[0].user_id, loginSucced: true});\r\n      } else {\r\n        this.setState({userId: 0});\r\n      }\r\n      console.log(this.state.loginSucced);\r\n    })\r\n    /*axios({\r\n      method: 'post',\r\n      url,\r\n      data: {\r\n          params\r\n      }\r\n      }).then((data) => {\r\n        console.log(login);\r\n        console.log(pass);\r\n        console.log(typeof(data.data));\r\n        console.log(data);\r\n        if(typeof(data.data[0].user_id) !== undefined){\r\n          this.setState({userId: data[0].user_id, loginSucced: true});\r\n        } else {\r\n          this.setState({userId: 0});\r\n        }\r\n        console.log(this.state.loginSucced);\r\n      })\r\n    */\r\n  }\r\n  updateLoginValue(evt) {\r\n    this.setState({\r\n      loginValue: evt.target.value\r\n    });\r\n  }\r\n  updatePassValue(evt) {\r\n    this.setState({\r\n      passValue: evt.target.value\r\n    });\r\n  }\r\n}\r\n\r\nexport default LoginForm;","import React from 'react';\nimport './App.css';\nimport LoginForm from './components/loginForm/LoginForm.js';\nimport {MuiThemeProvider, createMuiTheme} from '@material-ui/core';\nimport lightGreen from '@material-ui/core/colors/lightGreen';\n\nconst theme = createMuiTheme({\n  typography: {\n    useNextVariants: true,\n  },\n  palette: {\n    primary: lightGreen\n  }\n}\n);\n\nfunction App() {\n  return (\n    <MuiThemeProvider theme={theme}>\n      <div className=\"App\">\n        <LoginForm></LoginForm>\n      </div>\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}